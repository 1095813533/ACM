食物链

题目描述 
动物王国中有三类动物A,B,C，这三类动物的食物链构成了有趣的环形。A吃B，B吃C，C吃A。

现有N个动物，以1－N编号。每个动物都是A,B,C中的一种，但是我们并不知道它到底是哪一种。

有人用两种说法对这N个动物所构成的食物链关系进行描述：

第一种说法是“1 X Y”，表示X和Y是同类。

第二种说法是“2 X Y”，表示X吃Y。

此人对N个动物，用上述两种说法，一句接一句地说出K句话，这K句话有的是真的，有的是假的。当一句话满足下列三条之一时，这句话就是假话，否则就是真话。

1） 当前的话与前面的某些真的话冲突，就是假话；

2） 当前的话中X或Y比N大，就是假话；

3） 当前的话表示X吃X，就是假话。

你的任务是根据给定的N（1≤N≤50,000）和K句话（0≤K≤100,000），输出假话的总数。

输入描述:
第一行是两个整数N和K，以一个空格分隔。
以下K行每行是三个正整数 D，X，Y，两数之间用一个空格隔开，其中D表示说法的种类。
若D=1，则表示X和Y是同类。
若D=2，则表示X吃Y。
输出描述:
只有一个整数，表示假话的数目。
示例1
输入
100 7
1 101 1   
2 1 2     
2 2 3     
2 3 3     
1 1 3     
2 3 1     
1 5 5
输出
3

AC代码
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const ll maxn = 5e5+5, inf = 0x3f3f3f3f3f3f3f3f;
int f[maxn];
set<int> s;
int find(int x) {
    if (f[x] != x) {
        f[x] = find(f[x]);
    }
    return f[x];
}

void merge(int x, int y) {
    x = find(x);
    y = find(y);
    if (x != y) {
        f[x] = y;
    }
}
int main() {
    int n,k;
    scanf("%d%d",&n,&k);
    for(int i = 1; i <= 3*n; i++){
        f[i] = i;
    }
    int d,x,y;
    int ans = 0;
    for(int i = 1; i <= k; i++){
        scanf("%d%d%d",&d,&x,&y);
        if(x>n||y>n){
            ans++;
        }
        else if(d == 2 && x == y){
            ans++;
        }
        else if(d == 1){
            if(find(x) == find(y+n) || find(x+n) == find(y)){
                ans++;
            }
            else{
                merge(x,y);
                merge(x+n,y+n);
                merge(x+n+n,y+n+n);
            }
        }
        else{
            if(find(x) == find(y) || find(x) == find(y+n)) ans++;
            else{
                merge(x,y+n+n);
                merge(x+n,y);
                merge(x+n+n,y+n);
            }
        }
    }
    printf("%d\n",ans);
	return 0;
}

加边的无向图
题目描述 
给你一个 n 个点，m 条边的无向图，求至少要在这个的基础上加多少条无向边使得任意两个点可达~ 

输入描述:
第一行两个正整数 n 和 m 。
接下来的m行中，每行两个正整数 i 、 j ，表示点i与点j之间有一条无向道路。
输出描述:
输出一个整数，表示答案
示例1
输入
复制
4 2
1 2
3 4
输出
复制
1
备注:
对于100%的数据，有n,m<=100000。

AC代码
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const ll maxn = 1e5+5, inf = 0x3f3f3f3f3f3f3f3f;
int f[maxn];
set<int> s;
int find(int x) {
    if (f[x] != x) {
        f[x] = find(f[x]);
    }
    return f[x];
}

void merge(int x, int y) {
    x = find(x);
    y = find(y);
    if (x != y) {
        f[x] = y;
    }
}
int main() {
    int m,n;
    scanf("%d%d",&n,&m);
    for(int i = 1; i <= n; i++){
        f[i] = i;
    }
    int x,y;
    for(int i = 1; i <= m; i++){
        scanf("%d%d",&x,&y);
        merge(x,y);
    }
    for (int i = 1; i <= n; i++) {
        s.insert(find(i));
    }
    printf("%d\n",s.size()-1);

	return 0;
}
