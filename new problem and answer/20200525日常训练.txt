吃水果
题目描述 
       最近米咔买了n个苹果和m个香蕉，他每天可以选择吃掉一个苹果和一个香蕉（必须都吃一个，即如果其中一种水果的数量为0，则他不能进行这个操作），或者使用魔法将某一种水果的数量翻倍。
      现在米咔想吃西瓜了，但是他的主人赛小息不让他买新水果，除非苹果和香蕉没有了，即数量都是0了。

      现在米咔想知道，最少用多少天他可以吃光苹果和香蕉。

      可以证明的是，一定存在一种方案可以让米咔在若干天后吃光苹果和香蕉。

输入描述:
第一行一个正整数T（T≤100），代表数据组数。

接下来T行每行两个正整数n，m（n，m ≤100000）。

输出描述:
共T行，每行一个正整数代表答案。
示例1
输入
复制
3
1 1
1 2
2 5
输出
复制
1
3
7
说明
对于第三组测试样例（2,5），第一天令n翻倍变成（4,5），接下来连续吃三天水果变成（1,2），第五天令n翻倍变成（2,2），接下来连续吃两天水果，在第七天时吃光苹果和香蕉。
AC代码
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn = 1e6+5, mod = 1e9+7;
int main()
{
    int T;
    scanf("%d",&T);
    while(T--){
        int a, b;
        scanf("%d %d",&a,&b);
        if(a > b) swap(a,b);
        int base = 0;
        while(1){
            if(a < b - a){
                a = a * 2;
                base++;
            }
            else break;
        }
        int tmp = b - a;
        if(!tmp) printf("%d\n",a);
        else{
            int ans= a- tmp + tmp*2 + 1 + base;
            printf("%d\n",ans);
        }
    }
    return 0;
 }

四个选项
题目描述 
     众所周知，高考数学中有一个题目是给出12个单项选择，每一个选择的答案是 A，B，C，D 中的一个。

     网上盛传答案存在某种规律，使得蒙对的可能性大大增加。于是今年老师想让你安排这12个题的答案。但是他有一些条件，首先四个选项的数量必须分别为 na，nb，nc，nd。其次有 m 个额外条件，分别给出两个数字 x，y，代表第 x 个题和第 y 个题的答案相同。 现在你的老师想知道，有多少种可行的方案安排答案。
输入描述:
第一行五个非负整数na，nb，nc，nd，m，保证na+nb+nc+nd=12，0≤m≤1000。

接下来m行每行两个整数x，y（1≤ x,y ≤12）代表第x个题和第y个题答案必须一样。
输出描述:
仅一行一个整数，代表可行的方案数。
示例1
输入
复制
3 3 3 3 0
输出
复制
369600


AC代码
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
int shu[15];
int tong1[1005], tong2[1005], t;
int sum;
int c[4];
int nc[4];
void dfs(int step)
{
    int i;
    if (step == 13) {

        for (i = 0; i < t; i++){
            if (shu[tong1[i]] != shu[tong2[i]])
                return;

        }
        sum++;
        return;
    }
    for (i = 0; i < 4; i++){
        if (c[i] >= nc[i]){
            continue;
        }
        shu[step] = i;
        c[i]++;
        dfs(step+1);
        c[i]--;
    }
}

int main()
{
    int i;
    for (i = 0; i < 4; i++){
        cin >> nc[i];
    }
    cin >> t;
    for (i = 0; i < t; i++){
        cin >> tong1[i] >> tong2[i];
    }
    dfs(1);
    cout << sum << endl;
    return 0;
}
