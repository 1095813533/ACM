问题 A: Welcome
题目描述
”How happy we are, To meet friends from afar!”
Welcome to Hunan University of Chinese Medicine!
Hope all of you can enjoy the competition ^ v ^
Now your task is to read an integer w and output the character painting of ”HNUCM”, there are w
space(s) (space are represented by dot) between two letters. Please refer to the sample for the specific
format.
输入
There are several test files and each contains one case.
The input contains only 1 integer w (1 ≤ w ≤ 2018).
输出
The output has 5 lines, each line has 25+4w characters which only contains ’o’(lowercase letter ’o’) and
’.’(English period ’.’)
样例输入 Copy
1
样例输出 Copy
o...o.o...o.o...o.ooooo.o...o
o...o.oo..o.o...o.o.....oo.oo
ooooo.o.o.o.o...o.o.....o.o.o
o...o.o..oo.o...o.o.....o...o
o...o.o...o.ooooo.ooooo.o...o

签到题
 #include <bits/stdc++.h>
 using namespace std;
 int w;
 void print1() {
     for (int i = 1; i <= w; i++) printf(".");
 }
 void print2() {
     printf("o...o"); print1(); printf("o...o"); print1(); printf("o...o"); print1(); printf("ooooo"); print1(); printf("o...o\n");
     printf("o...o"); print1(); printf("oo..o"); print1(); printf("o...o"); print1(); printf("o...."); print1(); printf("oo.oo\n");
     printf("ooooo"); print1(); printf("o.o.o"); print1(); printf("o...o"); print1(); printf("o...."); print1(); printf("o.o.o\n");
     printf("o...o"); print1(); printf("o..oo"); print1(); printf("o...o"); print1(); printf("o...."); print1(); printf("o...o\n");
     printf("o...o"); print1(); printf("o...o"); print1(); printf("ooooo"); print1(); printf("ooooo"); print1(); printf("o...o\n");
 }
 int main() {
     cin >> w;
     print2();
     return 0;
}


问题 B: 绿地装饰
题目描述
湖南中医药大学坐落于中国历史文化名城长沙，是湖南省重点建设本科院校，是全国首批设立国家级重
点学科的高校，也是首批招收博士研究生、留学生及港澳台学生的中医药院校。学校现有 2 个校区，占
地面积 1393 亩，建筑面积 52 万平方米，主校区依岳麓南坡，临湘江西岸，环境幽雅，风光秀丽，是求
学成才的理想之地。
校园景观设计师小 W 的主要工作就是植被环境的设计维护，他有一个 N×N 的模板图，他创作景观的步
骤如下：
1、将当前的绿地分成 N×N 小块，再按照模板图添加装饰（黑色表示有装饰，白色表示没有）；
2、对于每个白色（未被装饰）的地块，递归操作 1，应用模板图，即分成更小的 N×N 块，继续进行装
饰，而黑色（已装饰）的地块则不必操作。
下图是某次装饰过程的示意图。
现在你的任务是求出 K 次递归后的绿地状态。

输入
单组数据。
第一行两个数 N,K，如题意中的描述。
接下来是一个 N×N 的模板图，’ . ’ 表示白色，’ * ’ 表示黑色。
2 ≤ n ≤ 3
1 ≤ k ≤ 5

输出
输出一个 N K×N K 的矩阵表示答案，不允许有多余的空行或空格。
样例输入 Copy
2 3
.*
..
样例输出 Copy
.*******
..******
.*.*****
....****
.***.***
..**..**
.*.*.*.*
........

模拟题
#include <bits/stdc++.h>
using namespace std;
const int maxn = 1005;
string ans[maxn], mat[maxn], mat1[5], mat2[5];
int n, k;
void green(int cur) {
	for (int i = 0; i < pow(n,cur-1); i++) {
	mat[i] = ans[i];
	ans[i].clear();
	}
	for (int i = 0, now = 0; i < pow(n,cur-1); i++, now += n) {
	for (int j = 0; j < mat[i].size(); j++) {
		if (mat[i][j] == '.') {
			ans[now] += mat1[0];
			ans[now+1] += mat1[1];
			ans[now+2] += mat1[2];
		}
		else {
			ans[now] += mat2[0];
			ans[now+1] += mat2[1];
			ans[now+2] += mat2[2];
			}
		}
	}
}
void print() {
	for (int i = 0; i < pow(n,k); i++)
	cout << ans[i] << endl;
}
int main() {
	cin >> n >> k;
	for (int i = 0; i < n; i++) cin >> mat1[i];
	for (int i = 0; i < n; i++) mat2[i] = (n==2) ? "**" : "***";
	ans[0] = '.';
	for (int i = 1; i <= k; i++) green(i);
	print();
	return 0;
}



问题 C: 击鼓传花
题目描述
岳麓山下旌旗卷，新月湖畔起歌声。湖南中医药大学运动会隆重开幕了，小 Q 所在的班级参加了“击鼓
传花”趣味比赛。
比赛规则如下，n 个队员 (不包括小 Q) 围成一个圈，每个人手里拿着一些花束 (数量也可能为 0)，小 Q
站在圆圈的中间，队员需要传递花束给小 Q，每个鼓点只允许一个人传送一束花，最终要求圆圈上所有
人的花束都传递给小 Q。请问需要花多少鼓点呢？
输入
多组数据。
第一行 n，代表队员数量。
第 2 行到第 n+1 行，每行一个整数 a[i]，代表每个队员最开始拿的花束数量。
0 ≤ a[i] ≤ 106
所有组的 n 之和不超过 103
输出
一个整数，代表需要的鼓点数。
样例输入 Copy
4
1
2
5
4
样例输出 Copy
12
简单的模拟题
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
int main() {
	int n;
	while (cin >> n) {
		ll ans = 0;
		for (int i = 1; i <= n; i++) {
			int a; scanf("%d",&a);
			ans += a;
		}
		printf("%lld\n",ans);
	}
	return 0;
}

问题 D: 旅行
题目描述
长沙市是首批国家历史文化名城，历经三千年城名、城址不变，有“屈贾之乡”、“潇湘洙泗”之称。存有
马王堆汉墓、三国吴简、铜官窑等历史遗迹。凝练出“经世致用、兼收并蓄”的湖湘文化和“心忧天下、
敢为人先”的长沙精神。长沙作为维新运动、旧民主主义革命、新民主主义革命策源地和发祥地之一，孕
育和走出了曾国藩、左宗棠、谭嗣同、黄兴、蔡锷、毛泽东、刘少奇等名人。

一天，小 W 来到了这座山水洲城的某个城区，这个城区中有 2N 个街区，分布为一个 2×N 的矩阵，有
些街区在某些时刻是禁止通行的。一个街区仅与之曼哈顿距离 (即 d(i, j) = |xi − xj | + |yi − yj |) 为 1 的
街区之间有道路相连。
街区的分布如下：
1,2,3,…,N
N+1,N+2,…,N×2
每个城区的道路边权矩阵为 w[i][j]
其中 w[0][i] 代表 i 和 i+1 街区之间道路的长度，

w[1][i] 代表 i+N 和 i+1+N 街区之间道路的长度，

w[2][i] 代表 i 和 i+N 街区之间的长度。
小 W 想知道在当前状态下如果从某个街区出发到另一个街区最少需要走的路径长度是多少。
由于道路施工的原因，某些时刻街区的通行状态和边权会发生改变，即需要处理三种操作：
操作 1：1 x y ，询问编号为 x 和 y 的城市之间的最短路
操作 2：2 x y z，将 w[x][y] 变为 z
操作 3：3 x y，将编号为 x 的通行状态改为 y，y 为‘X’或’P’，( 若为’X’，则表示不能经过，若为’P’，则表示可以经过)

输入
单组数据。
第一行两个正整数 n，m，m 为需要处理的操作数
接下来两行，每行是一个长度为 n 的字符串，表示城市能否经过。若为 X，则表示不能经过，若为 P，则
表示可以经过。
接下来描述两行，每行 n-1 个数分别描述 w[0][i] 和 w[1][i]
接下来一行 n 个数描述 w[2][i]
接下来 m 行，每行代表需要处理的一个操作。
对于所有数据 1 ≤ n, m ≤ 200000 。
输出
对于每个询问输出一行，从询问的 x 街区到 y 街区需要经过的最短路径 (不包括起点，但包括终点)，若
无法到达输出-1。
样例输入 Copy
5 5
PPPPX
PPXPP
3 7 10 9
7 9 7 9
4 9 8 1 1
1 1 10
1 1 9
1 2 3
3 3 X
1 5 5
样例输出 Copy
30
21
7
-1

线段树
#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
const int maxn = 2e5+5;
const LL INF = 1ll<<50;
struct node {
    LL c[6];
}T[maxn*4], a[maxn];
LL r[3][maxn];
int n, m, x, y, z, opt, ll, rr;
char s[2][maxn];
char cr[5];
int leaf[maxn];
node operator + (const node &A, const node &B) {
    node C;
    C.c[0] = min(A.c[0]+B.c[0],A.c[4]+B.c[5]);
    C.c[1] = B.c[1];
    C.c[2] = min(A.c[2]+B.c[2],A.c[5]+B.c[4]);
    C.c[3] = A.c[3];
    C.c[4] = min(A.c[4]+B.c[2],A.c[0]+B.c[4]);
    C.c[5] = min(A.c[5]+B.c[0],A.c[2]+B.c[5]);
    for (int i = 0; i < 6; i++) C.c[i] = min(INF,C.c[i]);
    return C;
}
inline void Update(int i) {
    if (s[0][i] == 'P' && s[0][i+1] == 'P') a[i].c[0] = r[0][i];
    else a[i].c[0] = INF;
    if (s[0][i+1] == 'P' && s[1][i+1] == 'P') a[i].c[1] = r[2][i+1];
    else a[i].c[1] = INF;
    if (s[1][i] == 'P' && s[1][i+1] == 'P') a[i].c[2] = r[1][i];
    else a[i].c[2] = INF;
    if (s[0][i] == 'P' && s[1][i] == 'P') a[i].c[3] = r[2][i];
    else a[i].c[3] = INF;
    a[i].c[4] = min(a[i].c[2]+a[i].c[3],a[i].c[0]+a[i].c[1]);
    a[i].c[5] = min(a[i].c[0]+a[i].c[3],a[i].c[1]+a[i].c[2]);
    for (int j = 4; j < 6; j++) a[i].c[j] = min(INF,a[i].c[j]);
}
inline void update(int k) {
    T[k] = T[k<<1]+T[k<<1|1];
}
inline void modify(int x) {
    T[leaf[x]] = a[x];
    x = leaf[x];
    for (x>>=1; x; x>>=1) update(x);
}
inline void build(int l, int r, int k){
    if (l == r) {
        T[k] = a[l];
        leaf[l] = k;
        return;
    }
    int mid = (l+r)>>1;
    build(l,mid,k<<1);
    build(mid+1,r,k<<1|1);
    update(k);
}
inline node Ask(int l, int r, int k) {
    if (ll <= l && r <= rr) return T[k];
    int mid = (l+r)>>1;
    if (rr <= mid) return Ask(l,mid,k<<1);
    if (mid < ll) return Ask(mid+1,r,k<<1|1);
    return Ask(l,mid,k<<1)+Ask(mid+1,r,k<<1|1);
}
inline void Print(LL x) {
    if(x < INF) printf("%lld\n",x);
    else printf("-1\n");
}
int main() {
    scanf("%d%d",&n,&m);
    scanf("%s%s",s[0]+1,s[1]+1);
    for (int i = 0; i < 2; i++)
        for(int j = 1; j < n; j++)
            scanf("%lld",&r[i][j]);
    for (int i = 1; i <= n; i++) scanf("%lld",&r[2][i]);
    for (int i = 1; i < n; i++) Update(i);
    build(1,n-1,1);
    while (m--) {
        scanf("%d",&opt);
        if (opt == 1) {
            int l,r; scanf("%d%d",&l,&r);
            int L = l, R = r;
            if (L > n) L -= n;
            if (R > n) R -= n;
            if (L > R) swap(L,R), swap(l,r);
            if (L == R) {
                if (l == r) {
                    char ch;
                    if (l > n) ch = s[1][L];
                    else ch = s[0][L];
                    if (ch == 'P') printf("0\n");
                    else printf("-1\n");
                }
                else {
                    if (L != n) Print(a[L].c[3]);
                    else Print(a[n-1].c[1]);
                }
                continue;
            }
            ll = L, rr = R-1;
            node ret = Ask(1,n-1,1);
            if (l <= n && r <= n) Print(ret.c[0]);
            else if (l > n && r <= n) Print(ret.c[5]);
            else if (l <= n && r > n) Print(ret.c[4]);
            else if (l > n && r > n) Print(ret.c[2]);
        }
        else if (opt == 2) {
            scanf("%d%d%d",&x,&y,&z);
            r[x][y] = z;
            if (y < n) Update(y), modify(y);
            if (y > 1) Update(y-1), modify(y-1);
        }
        else if (opt == 3) {
            scanf("%d%s",&y,cr);
            if (y > n) x = 1,y -= n;
            else x = 0;
            s[x][y] = cr[0];
            if (y < n) Update(y), modify(y);
            if (y > 1) Update(y-1), modify(y-1);
        }
    }
    return 0;
}

问题 E: 解密
题目描述
湖南中医药大学有含浦、东塘 2 个校区，学校办学历史悠久，前身为 1934 年的湖南国医专科学校，1953
年创办湖南中医进修学校，1960 年创建普通高等本科院校——湖南中医学院，1979 年成为全国首批取得
中医类研究生学历教育资格的院校，1990 年原湖南科技大学成建制并入湖南中医学院，2002 年与湖南省
中医药研究院合并，2006 年经教育部批准更名为湖南中医药大学，2012 年进入湖南省一本招生序列。
目前，学校与湖南省中医药研究院实行校院合一的管理体制。学校学科门类齐全、中医药特色鲜明。学校
设有 18 个学院、24 个本科专业，涵盖医、理、工、管、文等 5 大学科门类。中医诊断学在本学科研究领
域居国内领先水平。
小 F 居住在含浦校区，他想和东塘校区的同学小 L 聊天，为了保证沟通安全，他发明了一种加密方式，这
种加密方式是这样的：对于一个 01 串，小 F 会将其从左到右每 8 位分成一组，最后一组可能不足 8 位，
对每组进行逆序操作，即如果原来是 bLbL+1bL+2 · · · bR−1bR, 逆序之后变成 bRbR−1bR−2 · · · bL−1bL。现在
小 F 已经加密好了一个串，并且将其发给了小 L，你能帮助小 L 得到这串密文对应的原始信息吗？
输入
单组数据。
一行一个 01 串，代表加密后的字符串，串长度大于 0, 小于等于 100。
输出
一行字符串，代表加密后的字符串所对应的原始信。
样例输入 Copy
100010110011101
样例输出 Copy
110100011011100

又是一道简单模拟题

#include <bits/stdc++.h>
 using namespace std;
 int main() {
     string s; cin >> s;
     string ans;
     for (int i = 0; i < s.size(); i++) {
         ans += s[i];
         if ((i+1)%8 == 0) {
             for (int j = ans.size()-1; j >= 0; j--)
                 cout << ans[j];
             ans.clear();
         }
     }
     for (int j = ans.size()-1; j >= 0; j--)
         cout << ans[j];
     cout << endl;
     return 0;
 }




问题 F: 巍巍岳麓
时间限制: 1 Sec  内存限制: 128 MB
提交: 201  解决: 68  201501010119
题目描述
岳麓山风景区位于湖南省长沙市岳麓区，占地面积 35.20 平方公里，是南岳衡山 72 峰的最后一峰，位于
橘子洲旅游景区内，为城市山岳型风景名胜区，是中国四大赏枫胜地之一。
岳麓山位于首批国家历史文化名城长沙市湘江西岸，依江面市，现有岳麓山、橘子洲、岳麓书院、新民学
会四个核心景区，为世界罕见的集“山、水、洲、城”于一体的国家 AAAAA 级旅游景区、国家重点风
景名胜区、湖湘文化传播基地和爱国主义教育的示范基地。
岳麓山因南朝宋时《南岳记》中“南岳周围八百里，回燕为首，岳麓为足”而得名，融中国古文化精华的
儒、佛、道为一体，包容了历史上思想巨子、高僧名道、骚人墨客共同开拓的岳麓山文化内涵。景区内有
岳麓书院、爱晚亭、麓山寺、云麓宫、新民学会旧址、黄兴墓、蔡锷墓、第九战区司令部战时指挥部旧址
等景点。
为了改善岳麓山周边的旅游环境，市长决定对道路进行改造，城市中有 n 个路口，有些交叉路口之间有
道路直接相连；两个交叉路口之间最多有一条道路相连接。这些道路是双向的，且能把所有的交叉路口直
接或间接连接起来。每条道路都有一个分值，分值越小表示这个道路越繁忙，越需要改造。但是市政府的
资金有限，市长希望进行改造的道路越少越好，于是提出了下面的要求，需要同时满足：
1、改造的那些道路能把所有的交叉路口直接或间接地连通起来；
2、改造的道路尽量少且改造的那些道路中分值最大的道路的分值尽量小；
3、紧邻岳麓山的麓山南路必须改造。
请你做出规划设计，选择哪些道路应当改造。
输入
单组数据。
输入第一行有两个正整数 n 和 m，分别表示城市有 n 个交叉路口，m 条道路 (n <= 3000，m<=4000)。
接下来 m 行是对每条道路的描述，u，v，c 表示交叉路口 u 和 v 之间有道路相连，分值为 c(分值不会超
过 int)。最后一行两个正整数 s 和 t，表示麓山南路在交叉路口 s 和 t 相连的路上。
输出
输出两个整数 tot，max，表示你选出了几条道路，分值最大的那条的道路的分值是多少。
样例输入 Copy
4 5
1 2 3
1 4 5
2 4 7
2 3 6
3 4 8
1 4
样例输出 Copy
3 6
#include <bits/stdc++.h>
using namespace std;
const int maxn = 3005, inf = 0x3f3f3f3f;
struct edge {
    int u, v, w;
    edge() {}
    edge(int u, int v, int w) : u(u), v(v), w(w) {}
}eds[4005];
 
int n, m, s, t, st, sum, mx, ans = inf;
int p[maxn];
bool cmp(edge a, edge b) { return a.w < b.w; }
int find(int x) { return p[x] == x ? x : p[x] = find(p[x]); }
void Kruskal() {
    sort(eds+1, eds+1+m, cmp);
    for (int i = 1; i <= m; i++) {
        if ((s == eds[i].u && t == eds[i].v) || (t == eds[i].u && s == eds[i].v)) {
            st = eds[i].w;
            break;
        }
    }
 
    for (int i = 1; i <= m-n+2; i++) {
        for (int j = 1; j <= n; j++) p[j] = j;
        p[s] = t, mx = st, sum = 1;
        for (int j = i; j <= m; j++) {
            int x = find(eds[j].u); int y = find(eds[j].v);
            if (x != y) { mx = max(mx, eds[j].w); p[x] = y; sum++; }
            if (sum == n-1) {
                ans = min(ans,mx);
                break;
            }
        }
    }
}
int main() {
    scanf("%d%d",&n,&m);
    for (int i = 1; i <= m; i++) {
        scanf("%d%d%d",&eds[i].u,&eds[i].v,&eds[i].w);
    }
    scanf("%d%d",&s,&t); Kruskal();
    printf("%d %d\n",n-1,ans);
    return 0;
}



问题 G: Solution Sets
题目描述
For any positive integer N, there is an integer equation: (1/x1) + (1/x2) + (1/x2)....+ (1/Xn) = 1

For a given integer m, find the number of different solution sets of the integer equation when at most one Xi

is allowed to be greater than m. Note that all the Xi(i ∈ [1, n]) should be positive integers
输入
There are several test files and each contains one case.
The input has one line, and there are 2 positive integers separated by space, which are respectively n, m
(n ≤ 20, m ≤ 150)
输出
The output is a single line, which is the total number of different solution sets.
样例输入 Copy
3 6
样例输出 Copy
3
提示
As for the example, there are three solution sets, that is { 2,3,6 } ,{ 3,3,3 } and { 2,4,4 }.
Equality of sets is defined as set A is said to be equal to set B if both sets have the same elements or
members of the sets, i.e. if each element of set A also belongs to each element of set B, and each element
of set B also belongs to each element of set A.

这道不会

问题 H: 百舸争流

题目描述
橘子洲风景区位于湖南省长沙市市区对面的湘江江心，是湘江中最大的名洲，由南至北，横贯江心，西望
岳麓山，东临长沙城，四面环水，绵延数十里，狭处横约 40 米，宽处横约 140 米，形状是一个长岛，是
国家重点风景名胜区。
一天，N 名选手参加了一年一度的橘洲竞渡大赛，现在只剩下最后一场决赛了！
赛制为积分制，N 名选手的积分分别为 A1 到 AN。决赛的积分规则如下：第一名得 B1 分，第二名得 B2
分，……，第 m 名得 Bm 分，第 m+1 名至第 n 名不得分。最后第 i 名选手的总得分为 Ai 加上他在决
赛中的得分。
我们按总分为第一关键字、名字的字典序为第二关键字对选手进行排序。现告诉你一名选手的名字，希望
你告诉他，他最终的排名最前可能是多少，最后可能是多少。

输入
单组数据。
第一行为一个数 n，表示有 n 名选手 (1 ≤ n ≤ 105)。
接下来有 n 行，每行由一个字符串 S 和一个非负整数 Ai 表示，代表该人的名字和决赛之前的总分。

(名字仅由英文字母和数字表示，长度不超过 20，没有相同名字的两个人，0 ≤ Ai ≤ 106)。

接下来一个数 m(0 ≤ m ≤ n)。
接下来一行 m 个数字依次表示 B1, B2, B3, · · · , Bm (0 ≤ Bi ≤ 106)。
最后一个字符串表示询问的选手的名字。
输出
输出两个数，第一个表示最终排名最前可能多少，第二个表示最后可能多少。
样例输入 Copy
3
CH1 10
CH2 20
CH3 40
2
20 10
CH1

贪心题
#include <bits/stdc++.h>
using namespace std;
const int maxn = 100005;
struct py {
    string name;
    int a;
}pys[maxn];
int b[maxn];
bool cmp(py x, py y) {
    if (x.a == y.a) return x.name < y.name;
    return x.a > y.a;
}
bool cmp1(int x, int y) { return x > y; }
int main() {
    //freopen("input.txt", "r", stdin);
    int n; cin >> n;
    for (int i = 1; i <= n; i++)
        cin >> pys[i].name >> pys[i].a;
    //sort(pys+1,pys+1+n,cmp);
    int m; cin >> m;
    for (int i = 1; i <= m; i++)
        cin >> b[i];
    sort(b+1,b+1+m,cmp1);
 
    string name; cin >> name;
    int now_r, now_s;
    // 成绩最好
    for (int i = 1; i <= n; i++) {
        if (pys[i].name == name) {
            pys[i].a += b[1];
            break;
        }
    }
    sort(pys+1,pys+1+n,cmp);
    for (int i = 1; i <= n; i++) {
        if (pys[i].name == name) {
            now_r = i;
            now_s = pys[i].a;
            break;
        }
    }
    for (int i = n, pos = now_r+1; i >= now_r+1 && pos <= n; i--, pos++) {
        if (now_s < pys[i].a+b[pos] || (pys[i].a+b[pos] == now_s && name > pys[i].name)) 
            now_r++, i++;
        }
    }
    cout << now_r;
    // 成绩最差
    for (int i = 1; i <= n; i++) {
        if (pys[i].name == name) {
            pys[i].a -= b[1];
            pys[i].a += b[n];
            break;
        }
    }
    sort(pys+1,pys+1+n,cmp);
    for (int i = 1; i <= n; i++) {
        if (pys[i].name == name) {
            now_r = i;
            now_s = pys[i].a;
            break;
        }
    }
    for (int i = now_r+1, pos = n-now_r; i <= n && pos >= 1; i++, pos--) {
        if (now_s < pys[i].a+b[pos] || (pys[i].a+b[pos] == now_s && name > pys[i].name)) 
            now_r++;
        }
        else {
            i--;
        }
    }
    cout << " " << now_r << endl;
    return 0;
}



问题 I: 最长不下降子序列
题目描述
给定一个序列 a，求去除 a 中一段连续长度为 L 的序列后，a 的最长不下降子序列的长度的最大值。
输入
单组数据。
第一行两个整数 n,L 表示序列的长度为 n，L 如题意所示。
第二行 n 个数表示序列 a
n ≤ 105, 0 ≤ L ≤ n
输出
输出一个整数表示最长不下降子序列长度的最大值
样例输入 Copy
6 3
2 1 3 6 4 5
样例输出 Copy
3

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn = 100005;
int n, l, ans = 0, cnt = 0;
struct A {
    int val, id;
}a[maxn];
int b[2][maxn], c[2][maxn], id[maxn];
bool cmp (A x, A y) { return x.val < y.val; }
int lowbit(int x) { return x&(-x); }
void add(int k, int x, int d) {
    while (x <= cnt) {
        c[k][x] = max(c[k][x],d);
        x += lowbit(x);
    }
}
int sum(int k, int x) {
    int ret = 0;
    while (x > 0) {
        ret = max(c[k][x], ret);
        x -= lowbit(x);
    }
    return ret;
}
int main() {
    scanf("%d%d",&n,&l);
    for (int i = 1 ; i <= n; i++)
        scanf("%d",&a[i].val), a[i].id = i;
    sort(a+1,a+1+n,cmp);
    for (int i = 1; i <= n; i++) {
        if (a[i].val == a[i-1].val) id[a[i].id] = cnt;
        else  id[a[i].id] = ++cnt;
    }
 
    for (int i = 1; i <= n; i++) {
        b[0][i] = sum(0,id[i])+1;
        add(0,id[i],b[0][i]);
        if (i > l) {
            b[1][i] = sum(1,id[i])+1;
            add(1,id[i],b[1][i]);
            add(1,id[i-l],b[0][i-l]);
        }
        ans = max(ans,b[1][i]);
    }
    for (int i = 1; i <= n-l; i++)
        ans = max(ans,b[0][i]);
    printf("%d\n",ans);
    return 0;
}


问题 J: Mode
题目描述
Given N(1 ≤ N ≤ 10000) unordered positive integers ranging from 1 to 30000. The same positive
integer may appear multiple times and the most frequently occurring integer is called the mode. Find
the sequence’s mode(s) and the number of times it appears.
输入
There are several test files and each contains one case.
The first line of the input is a positive integers N and the second line begins with N positive integers.

输出
The output has several lines, two for each line. The first is the mode, and the second is the number of
times the mode appears. 1 space between the middle. If there are multiple modes, print the modes in
ascending order.
样例输入 Copy
12
2 4 2 3 2 5 3 7 2 3 4 3
样例输出 Copy
2 4
3 4
一行数，输出出现次数最多的那个数和他的次数，若有多个答案，则按照数字从小到大输出
暴力就行了


#include <bits/stdc++.h>
using namespace std;
const int maxn = 30005;
int a[maxn], mx = 0;
int main() {
    memset(a, 0, sizeof(a));
    int n; scanf("%d",&n);
    for (int i = 1; i <= n; i++) {
        int x; scanf("%d",&x);
        a[x]++;
    }
    for (int i = 1; i <= 30000; i++)
        mx = max(mx,a[i]);
    for (int i = 1; i <= 30000; i++)
        if (a[i] == mx) printf("%d %d\n", i, mx);
    return 0;
}




问题 K: Matrix
题目描述
There is a N×N matrix. Dr.L want to choose N grid from the matrix and number them with different
number from 1 to N. At the same time, he doesn’t like the grid numbered with i locate in the i-th row
or the i-th column. And any two selected grids cannot be in the same row or in the same column. How
many schemes can Dr.L find? Please output the answer modulo M.

输入
There are several test files and each contains one case.
Two positive initegers N and M (N ≤ 1015, M ≤ 106)

输出
The number of schemes modulo M.
样例输入 Copy
2 1000
样例输出 Copy
1
简单数学题，暴力计算就行了

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn = 1000005;
ll f[maxn];
int main() {
    ll n, m; scanf("%lld%lld",&n,&m);
    n %= m;
    f[1] = 0; f[2] = 1;
    for (int i = 3; i <= m; i++)
        f[i] = (i-1)*(f[i-1]+f[i-2])%m;
    ll ans = f[n]*f[n]%m;
    printf("%lld\n",ans);
    return 0;
}


问题 L: 药剂
题目描述
小 Q 是一名出色的药剂师，为了合成新的药剂，他将药材放入了一个 n×m 的网格状药材盒（下标从 1
开始），用 n 个长度为 m 的字符串 (仅由小写字母组成) 代表这个药材盒，一共有 26 种药材，每个字母
代表一种药材。
为了达到最优的疗效，小 Q 需要尝试不同的配比方案，为此他进行了 q 次操作，操作有两种
操作 0：0 x y z ，将下标为 (x,y) 处的药材改为 z 药材
操作 1：1 x1 y1 x2 y2 ，询问矩形 (x1 ≤ x ≤ x2, y1 ≤ y ≤ y2) 区域内不同的药材各出现了多少次
输入
多组数据。
每组数据第一行两个整数 n，m（1 ≤ n, m ≤ 1000）。
接下来 n 行，每行一个长度为 m 的字符串。
接下来一个整数 q (q ≤ 20000)，下面 q 行代表要处理的操作，格式如题意所示。

输出
对于每个操作 1 输出一行，每行 26 个整数，表示 a-z 药材出现的次数，用一个空格分割，行末不允许有
多余空格。
样例输入 Copy
3 3
aaa
bbb
ccc
3
1 2 1 2 2
0 2 2 z
1 1 1 2 3
5 4
abcd
bcda
cdab
dabc
abcd
4
0 4 1 x
1 1 2 2 4
0 2 1 l
1 1 1 3 3
样例输出 Copy
0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0
3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 1
1 1 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0
2 1 3 2 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0
0 0 0 0 0 0 0
这道题坑死我，n X m <= 1,000,000，时间为一百万，如果每次询问都是最大范围，时间为q X n X m = 2 X 1e10 时间不够，因此像这种情况要用线段树或者树状数组预处理区间和
然后写出代码，结果比赛结束后，其他小组说暴力就解出来了，估计是他的数据不够严谨，哭了

#include <bits/stdc++.h>
using namespace std;
const int maxn = 1010;
int C[30][maxn][maxn], ans[30];
string mat[maxn];
int n, m;
int lowbit(int y) {
    return y&(-y);
}
void add(int ch, int x, int y, int d) {
    while (y <= m) {
        C[ch][x][y] += d; y += lowbit(y);
    }
}
int sum(int ch, int x, int y) {
    int ret = 0;
    while (y > 0) {
        ret += C[ch][x][y]; y -= lowbit(y);
    }
    return ret;
}
int main() {
    while (scanf("%d%d",&n,&m) == 2) {
        memset(C,0,sizeof(C));
        for (int i = 1; i <= n; i++) {
            cin >> mat[i]; mat[i] = "0"+mat[i];
            for (int j = 1; j <= m; j++) {
                add(mat[i][j]-'a',i,j,1);
            }
        }
        int q; scanf("%d",&q);
        while (q--) {
            int op; scanf("%d",&op);
            if (op == 0) {
                int x, y; scanf("%d%d",&x,&y); getchar();
                char z; scanf("%c",&z);
                add(mat[x][y]-'a',x,y,-1);
                mat[x][y] = z;
                add(mat[x][y]-'a',x,y,1);
            }
            else {
                memset(ans,0,sizeof(ans));
                int x1, x2, y1, y2;
                scanf("%d%d%d%d",&x1,&y1,&x2,&y2);
                for (int i = x1; i <= x2; i++) {
                    for (int ch = 0; ch < 26; ch++) {
                        ans[ch] += sum(ch,i,y2)-sum(ch,i,y1-1);
                    }
                }
                printf("%d",ans[0]);
                for (int i = 1; i < 26; i++) printf(" %d",ans[i]);
                printf("\n");
            }
        }
    }
    return 0;
}


