A. 【美团杯2020】查查查乐乐
“查查查乐乐”是一段古老神秘的咒语，只有被选中的魔法师才有资格使用这一段咒语并享用它所带来的力量；而如果这段咒语出现在了不具资格的魔法师的口中，这个魔法师将会遭到咒语的反噬并付出可怕的代价。

这个学期，镁团在一家魔法早教学校做兼职，他的任务是教小学生们魔法并帮助他们准备一年一度的全国魔法奥林匹克竞赛 (NOMP)。今天，镁团在整理图书的时候，突然发现一本课外教材中包含了 t 段只由查和乐组成的咒语。让小学生们阅读这些咒语是非常危险的：他们可能会在无意识中念出“查查查乐乐”。

因此，作为一名富有责任心的儿童教师，镁团打算修改这些咒语，从而最大程度地杜绝这方面的隐患。镁团认为一段由查和乐组成的咒语是危险的当且仅当在删去咒语中的若干个字（也可以不删）后，剩下的咒语可能变成查查查乐乐。举例来说，“查查查乐乐”，“查查乐查乐乐” 就是危险的，而 “乐乐查查查”，“乐查乐乐查乐查查”就不是危险的。

对于每一段咒语，镁团都可以选择若干个位置并对这些位置进行修改：他可以把“查”变成“乐”，也可以把“乐”变成“查”。为了最大限度地保留教学效果，镁团希望使用尽可能少的修改来消除所有的危险性：对于每一段咒语，镁团都希望你帮他计算一下最少的修改次数。

输入格式
输入第一行是一个整数 t(1≤t≤1000)，表示咒语的数量。

对于每组数据，输入包含一行一个只包含字符 x 和 l 的字符串 s(1≤|s|≤100)，描述了一段咒语。其中 x 表示“查”，l 表示 “乐”。

输出格式
对于每段咒语，输出一行一个整数表示最少的修改次数。

样例一
input
3
xxxll
xxlxllllxl
xxxxxlllll

output
1
1
3

explanation
对于三段咒语，我们分别给出一种让修改次数最小的方案：

xxlll，修改了第 3 个字。
xxllllllxl，修改了第 4 个字。
xxllllllll， 修改了第 3,4,5 个字。

AC代码
#include <bits/stdc++.h>
#define maxn 100
using namespace std;

main(void) {
    int T;
    cin >> T;
    int x[maxn + 1], l[maxn + 1];
    while (T--) {
        for (int i = 0; i <= maxn; i++)
            x[i] = maxn + 1, l[i] = -1;
        string s;
        cin >> s;
        int n   = s.size();
        int cnt = 0;
        for (int i = 0; i < n; i++)
            if (s[i] == 'x' && ++cnt >= 3)
                x[cnt - 3] = i;
        cnt = 0;
        for (int i = n - 1; i >= 0; i--)
            if (s[i] == 'l' && ++cnt >= 2)
                l[cnt - 2] = i;
        int px = 0, ans = maxn;
        while (px <= maxn) {
            int pl = 0;
            while (pl < maxn && l[pl] >= x[px]) pl++;
            ans = min(ans, px + pl);
            px++;
        }
        cout << ans << endl;
    }


M. 【美团杯2020】最长公共子序列
蒜斜和镁团在玩一个叫做“你问你猜”的游戏（可怜去哪了？）。规则如下：

镁团手中有n个数，且恰好是 1−n 的排列。 每次询问，蒜斜需要给出一个长度不超过 100，且每个元素都在 1−n 之间的数列（不需要是排列）；之后镁团会告诉蒜斜这两个数列的最长公共子序列长度。 蒜斜需要在不超过650次询问内猜出镁团手中的排列。

这对于蒜斜来说实在太困难了，因此他找到了玉树临风文质彬彬英俊潇洒神采奕奕温文尔雅风度翩翩的你，你能帮助他吗？

任务
你需要编写一个函数 find_permutation，以确定镁团手中的排列是什么。

find_permutation(n, res)
n: 镁团手中排列的长度。
res：返回数组，你需要把你确定的排列存储到 res 中。
你可以调用函数 get_lcs 以帮助你确定镁团手中的排列。我们会根据你调用这个函数的次数评分。

get_lcs(len, A) 接受整数 len 和一个长度为 len 的数组 A，并会返回数组 A 与目标排列的最长公共子序列长度。
在一组测试数据中，find_permutation 只会被调用一次。

实现细节
本题只支持 C++。

你只能提交一个源文件实现如上所述的 find_permutation 函数，并且遵循下面的命名和接口。

C++
你需要包含头文件 lcs.h。

void find_permutation(int n, int res[]);
你需要把答案排列存储在 res[0] 至 res[n-1] 中。

函数 get_lcs 的接口信息如下。

int get_lcs(int len, int A[]);
你需要把询问的数组存储在 A[0] 至 A[len-1] 中，数组 A 中的元素必须是区间 [1,n] 中的整数。请保证你的所有询问都满足这个要求，不然的话可能会出现包括但不限于 Wrong Answer, Dangerous Syscalls 的评测错误。

如果有不清楚的地方，见样例及测评库下载，内附了样例程序。

评测方式
评测系统将读入如下格式的输入数据：

第 1 行: n，表示镁团手中的排列长度。
第 2 行: n 个空格隔开的整数，表示镁团手中的排列。
在 find_permutation 返回后，评测系统将输出你的答案以及 get_lcs 的调用次数。

样例输入
样例一
input
5
1 5 2 4 3

output
1 5 2 4 3
10

explanation
样例输出的含义为 find_permuation 在 10 次询问之后，确定了镁团手中的排列为 1 5 2 4 3。

限制与约定
find_permutation 只能进行不超过 650 次询问。如果超过了这个询问数量，你的程序将无法得分。

本题严禁任何形式的攻击交互库的行为，一旦发现，将取消相关选手的参赛资格。

Small Task: n≤30
Large Task: n≤100
时间限制：1s
空间限制：256MB

AC代码


#include "lcs.h"
using namespace std;

int r[105];
int fn[105];
bool cmp(int n, int a, int b) {
	for (int j = 0; j < n; j++) r[j] = a;
	r[n - 1] = b;
	int res = get_lcs(n, r);
	if (res == 2) return 1;
	return 0;
}
int ed[105];
void find_permutation(int n, int res[])
{
	fn[0] = 1;
	for (int i = 2; i <= n; i++) {
		int l = 0, r = i - 1; // < pl
		while (l < r) {
			int mid = (l + r) >> 1;
			if (cmp(n, i, fn[mid])) r = mid;
			else l = mid + 1;
		}
		int cnt = 0;
		for (int j = 0; j < l; j++)
			ed[cnt++] = fn[j];
			ed[cnt++] = i;
		for (int j = l; j < i - 1; j++)
			ed[cnt++] = fn[j];
		for (int j = 0; j < i; j++)
			fn[j] = ed[j];
	}
	for (int j = 0; j < n; j++)
		res[j] = fn[j];
}